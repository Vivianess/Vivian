library(rattle)   # Access weather dataset and utilities.
library(magrittr) # For the %>% and %<>% pipeline operators.

# This log generally records the process of building a model. 
# However, with very little effort the log can also be used 
# to score a new dataset. The logical variable 'building' 
# is used to toggle between generating transformations, 
# when building a model and using the transformations, 
# when scoring a dataset.

building <- TRUE
scoring  <- ! building

# A pre-defined value is used to reset the random seed 
# so that results are repeatable.

crv$seed <- 42 

#============================================================
# Rattle timestamp: 2018-01-24 15:38:11 x86_64-w64-mingw32 

# Load the dataset from file.

fname <- "file:///C:/Users/vivianjheng/Desktop/AUM NOT 0_BASE.csv" 
crs$dataset <- read.csv(fname,
                        na.strings=c(".", "NA", "", "?"),
                        strip.white=TRUE, encoding="UTF-8")

#============================================================
# Rattle timestamp: 2018-01-19 16:41:35 x86_64-w64-mingw32 

# Note the user selections. 

# The following variable selections have been noted.
#?R?ܼ?"AVG_SPD_CNT_ONLINE", "AVG_SPD_CNT_OFFLINE","total_visit",
crs$input     <- c("AGE", "RISK_LEVEL", "FLG_KYC", "OPN_DAYS", "PPC_CNT",
                   "SAV", "TRUST", "SPD", "TRANS_CNT_12", 
                   "retail_wm","AVG_AMT_SPD", "AUM")

crs$numeric   <- c("AGE", "RISK_LEVEL", "FLG_KYC", "OPN_DAYS", "PPC_CNT",
                   "SAV", "TRUST", "SPD", "TRANS_CNT_12", 
                   "retail_wm", "AVG_AMT_SPD", "AUM")

crs$categoric <- NULL

crs$target    <- NULL
crs$risk      <- NULL
crs$ident     <- NULL
crs$ignore    <- c("CIF_NO", "CUST_TYPE", "CHNL", "GENDER", "Industry_Typ", "KYC_CHILD_CNT", "KYC_EDU_STATUS", "KYC_SALARY", "KYC_FAMILY_SAL", "KYC_AVAILABLE_AMT", "KYC_INV_EXP", "KYC_INV_PERIOD", "KYC_INT_NEED", "KYC_ROI_EXP", "KYC_RISK_INTEND", "KYC_LOST_ACT", "KYC_TA_INVEST", "KYC_TA_EDU_FUND", "KYC_TA_MARI_HOUSE", "KYC_TA_TAX", "KYC_EVER_TDFD", "KYC_EVER_STOCK", "KYC_EVER_INS_BOND", "KYC_EVER_FINANCIAL", "KYC_FR_REST", "KYC_FR_SAV_RETIRE", "KYC_FR_COMPANY", "KYC_FR_SAL", "PPC_NO2", "NTD_AMT_12", "NTD_AMT_11", "NTD_AMT_10", "TD_AMT_12", "TD_AMT_11", "TD_AMT_10", "FUND_EVEN", "FUND_NOW", "OPN_DT_FUND", "FUND_ROBOT_EVEN", "FUND_ROBOT_NOW", "FUND_ONCE_EVEN", "FUND_ONCE_NOW", "FUND_RSP_EVEN", "FUND_RSP_NOW", "FUND_AUM", "FUND_ROBOT_AUM", "FUND_ONCE_AUM", "FUND_RSP_AUM", "LOAN_PERSON_EVEN", "LOAN_HOUSE_EVEN", "LOAN_PERSON_NOW", "LOAN_HOUSE_NOW", "SPD_MIN_MONTH", "SPD_REC_MONTH", "FLG_VISIT", "lastdate_ago", "retail", "retail_obankacct", "retail_cm_cashmain", "retail_cm_mgm", "retail_cm_payrollmain", "retail_cm_ratemain", "retail_cm_smartmain", "retail_debit_cardmain", "retail_event_eventcomapign", "retail_insu", "retail_loan", "retail_loan_personal", "retail_loan_mortgage", "retail_wm_robot", "AGE_G", "AVG_AMT_TRAVEL_TRAFFIC", "AVG_AMT_DEP_SHOP", "AVG_AMT_FOOD", "AVG_AMT_HOUSE", "AVG_AMT_ENTERTAIN", "AVG_AMT_HOUSEKEEP", "AVG_AMT_3C", "AVG_AMT_HOSPITAL", "AVG_AMT_FINANCE", "AVG_AMT_FINTECH", "AVG_AMT_EC", "AVG_AMT_SUPERMART", "AVG_AMT_OTH", "AVG_AMT_SPD", "SPD_AMT_TTL", "SPD_CNT_ONLINE", "SPD_CNT_OFFLINE", "SPD_CNT_TTL", "AVG_CNT_TRAFFIC", "AVG_CNT_DEP_SHOP", "AVG_CNT_FOOD", "AVG_CNT_HOUSE", "AVG_CNT_ENTERTAIN", "AVG_CNT_HOUSEKEEP", "AVG_CNT_3C", "AVG_CNT_HOSPITAL", "AVG_CNT_FINANCE", "AVG_CNT_FINTECH", "AVG_CNT_EC", "AVG_CNT_SUPERMART", "AVG_CNT_OTH", "AVG_CNT_SPD", "AVG_SPD_CNT_ONLINE", "AVG_SPD_CNT_OFFLINE", "AUM_G")
crs$weights   <- NULL
#============================================================
# Rattle timestamp: 2018-01-19 14:08:57 x86_64-w64-mingw32 

# KMeans 

# Reset the random number seed to obtain the same results each time.

set.seed(crv$seed)

# The 'reshape' package provides the 'rescaler' function.

library(reshape, quietly=TRUE)

# Generate a kmeans cluster of size 5.

crs$kmeans <- kmeans(sapply(na.omit(crs$dataset[crs$sample, crs$numeric]), rescaler, "range"), 6)
set.seed(43)
kms8 <- kmeans(sapply(na.omit(crs$dataset[, crs$numeric]), rescaler, "range"), 8)
#============================================================
# Rattle timestamp: 2018-01-19 14:08:57 x86_64-w64-mingw32 

# Report on the cluster characteristics. 

# Cluster sizes:
paste(kms8$size, collapse=' ')
paste(crs$kmeans$size, collapse=' ')

# Data means:

colMeans(sapply(na.omit(crs$dataset[crs$sample, crs$numeric]), rescaler, "range"))

# Cluster centers:

crs$kmeans$centers
kms8$centers
# Within cluster sum of squares:

crs$kmeans$withinss


#K?Ȫ??M?w
set.seed(42)#?]?w?ؤl?i?T?w?X?o???????I
klist<- seq(1:15)
knnFunction <- function(x) {
  kms <- kmeans(sapply(na.omit(crs$dataset[, crs$numeric]), rescaler, "range"), x)
  ratio <- kms$tot.withinss / (kms$tot.withinss + kms$betweenss)
  }
ratio <- sapply(klist, knnFunction)
df <- data.frame(kv= klist,KMratio=ratio)
df

library(ggplot2)
#?e?ϡG?M?wK?s
ggplot(df, aes(x=kv, y=KMratio, label=kv, color=KMratio))+
geom_point(size=5)+ geom_text(vjust=2)

paste(kms7$size, collapse=' ')
kms8$centers
kms8$withinss
kms8$tot.withinss
kms8$betweenss

# Generate a discriminant coordinates plot.

cluster::clusplot(na.omit(crs$dataset[, intersect(crs$input, crs$numeric)]), kms8$cluster, color=TRUE, shade=TRUE, main='Discriminant Coordinates AUM NOT 0_BASE.csv')

# Display a scatterplot matrix for the KMeans clustering. 

# Select a sample from the dataset to calculate the statistics.

set.seed(42)
smpl <- sample(length(crs$kmeans$cluster), 4000)

# Keep just the first 5 variables for the plot.

vars <- 1:5

# Generate a data plot.

plot(na.omit(crs$dataset[, intersect(crs$input, crs$numeric)][smpl, vars]), col=crs$kmeans$cluster)
title(main="",
      sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))


#?ץX?��s???G
class_WM_raw0 = cbind(crs$dataset,kms8$cluster)
colnames(class_WM_raw0)[125]='Y'
robot_WM_raw = class_WM_raw0[,c(1,125)]
write.csv(robot_WM_raw,'kmeans_WM2.csv')

robot_WM_raw = class_WM_raw0[,c(1:5,7:125)]
write.csv(robot_WM_raw,'kmeans_WM3.csv')
robot_WM_raw

#?e???h??
library(rpart)
class_WM = rpart(y~.,class_WM_raw)
plot(class_WM)
text(class_WM)


robot_km_tree <- robot_WM_raw[,c("RISK_LEVEL", "FLG_KYC", "PPC_CNT",
                   "SAV", "TRUST", "SPD", "TRANS_CNT_12", 
                   "retail_wm","ONLINE_R","Y","AVG_AMT_3C","AVG_AMT_ENTERTAIN","AVG_AMT_HOSPITAL")] #"AGE","AUM", "OPN_DAYS"

robot_km_tree <- robot_WM_raw[,c("AGE", "RISK_LEVEL", "FLG_KYC", "OPN_DAYS", "PPC_CNT",
                                 "SAV", "TRUST", "SPD", "TRANS_CNT_12", 
                                 "retail_wm","AVG_AMT_SPD", "AUM","Y")]

robot_km_tree$RISK_LEVEL <- as.factor(robot_km_tree$RISK_LEVEL)
robot_km_tree$FLG_KYC <- as.factor(robot_km_tree$FLG_KYC)
robot_km_tree$SAV <- as.factor(robot_km_tree$SAV)
robot_km_tree$TRUST <- as.factor(robot_km_tree$TRUST)
robot_km_tree$SPD <- as.factor(robot_km_tree$SPD)
robot_km_tree$Y <- as.factor(robot_km_tree$Y)

str(robot_km_tree)

#(3)?إߨM?????ҫ? 
dtreeM <- rpart(formula = Y ~ ., data = robot_km_tree, method = "class", control = rpart.control(cp = 0.0005))
dtreeM <- rpart(formula = Y ~ ., data = robot_km_tree, method = "anova", control = rpart.control(cp = 0.001))

#(4)??rattle?e?X?F?`???M????(Rx: rxDTree)
install.packages("rattle")
library(rattle)
fancyRpartPlot(dtreeM)
require(rpart.plot) 
prp(dtreeM,            # ?ҫ?
    faclen=0,           # ?e?{???ܼƤ??n?Y?g
    fallen.leaves=TRUE, # ?????K?H?????覡?e?{
    shadow.col="gray",  # ?̤U?????`?I???W???v
    # number of correct classifications / number of observations in that node
    extra=2) 



#(2)???ռҫ?
#???o?`????
n <- nrow(robot_km_tree)
#?]?w?H???ƺؤl
set.seed(1117)
#?N?ƾڶ??ǭ??s?ƦC
new_robot_km_tree <- robot_km_tree[sample(n),]
#???X?˥??ƪ?idx
t_idx <- sample(seq_len(n), size = round(0.7 * n))

#?V?m???ƻP???ո??Ƥ???: 70%?ؼҡA30%????
traindata <- new_robot_km_tree[t_idx,]
testdata  <- new_robot_km_tree[-t_idx,]

#Random Forest
install.packages("randomForest")
library(randomForest)

#out of memory(??30%)
randomF <- randomForest(Y ~ ., data=testdata,importane=T,proximity=T)
print(randomF)
plot(randomF)

#?Ŷq?C?@???ܼƹ?Y?Ȫ????n?ʡA?????p???I?ĤG??
var <- round(importance(randomF,type=2), 2)
var        
order(round(importance(randomF), 2),decreasing=T)
var[order(round(importance(randomF), 2),decreasing=T),]


library(sqldf)
sqldf("select * from var")


#C5.0
install.packages("C50")
library(C50)
C50 <- C5.0(Y ~ . ,data=robot_km_tree)
summary(C50)
plot(C50)
fancyRpartPlot(C50)


#?w?????G
result_dtreeM = predict(dtreeM,robot_km_tree,type='class')
result_C50    = predict(C50,robot_km_tree,type='class')
result_dtreeM
result_C50
#?ץX?ݥ??T?v?x?}
robot_tree_predict = cbind(robot_WM_raw[c("Y")],result_dtreeM,result_C50)
write.csv(robot_tree_predict,'kmeans_WM4.csv')



#?ȬD???ʥd?̫?TREE
#32 <- OPN_DAYS
SPD_CUST   <-subset(robot_WM_raw, SPD==1, select=c(4,5,83:94,96:98,124))
NO_SPD_CUST<-subset(robot_WM_raw, SPD==0, select=c(2,4,5,6,32,33,65,83:120,124))

SPD_CUST$PPC_CNT <- as.factor(SPD_CUST$PPC_CNT)
SPD_CUST$Industry_Typ <- as.factor(SPD_CUST$Industry_Typ)
SPD_CUST$Y <- as.factor(SPD_CUST$Y)
NO_SPD_CUST$PPC_CNT <- as.factor(NO_SPD_CUST$PPC_CNT)



#(3)?إߨM?????ҫ? 
dtreeM2 <- rpart(formula = Y ~ ., data = SPD_CUST, method = "class", control = rpart.control(cp = 0.001))
dtreeM2 <- rpart(formula = Y ~ ., data = SPD_CUST, method = "anova", control = rpart.control(cp = 0.001))

#(4)??rattle?e?X?F?`???M????(Rx: rxDTree)
install.packages("rattle")
library(rattle)
fancyRpartPlot(dtreeM2)
#??prp()?e?X?Ӫ??Ϥ????n??
require(rpart.plot) 
prp(dtreeM2,            # ?ҫ?
    faclen=0,           # ?e?{???ܼƤ??n?Y?g
    fallen.leaves=TRUE, # ?????K?H?????覡?e?{
    shadow.col="gray",  # ?̤U?????`?I???W???v
    # number of correct classifications / number of observations in that node
    extra=2) 

dtreeM2



